#import functools
#import random

cypherTable = [0x3C, 0x7F, 0x83, 0x81, 0x80, 0x78, 0x6A, 0x08, 0xBC, 0xD8, 0x75, 0x89, 0x2C, 0x41, 0xBD, 0xC6,
               0x4A, 0xC7, 0xAE, 0xA0, 0x19, 0x72, 0x28, 0x03, 0x40, 0x99, 0x43, 0x42, 0x07, 0xA5, 0x74, 0xB4,
               0xDB, 0xD0, 0x50, 0x18, 0xA4, 0xF9, 0x91, 0x88, 0xCB, 0x5F, 0x55, 0xDD, 0x82, 0x3A, 0x93, 0x0A,
               0xD4, 0x26, 0x1A, 0xD1, 0x29, 0x85, 0xAB, 0xEF, 0x5A, 0x12, 0xB0, 0xEA, 0x7C, 0x6B, 0x4F, 0x9D,
               0x06, 0x27, 0xE2, 0x64, 0x4C, 0xE4, 0xBB, 0xEE, 0x6F, 0x8B, 0x2F, 0x30, 0x51, 0x61, 0x65, 0xA7,
               0x77, 0xFA, 0x5D, 0xE1, 0xCE, 0xFD, 0x5C, 0xF8, 0x8F, 0x8C, 0xC3, 0xA1, 0xCA, 0xDE, 0xCF, 0xF5,
               0xB2, 0x69, 0xD5, 0xB5, 0x23, 0xC8, 0x0B, 0x31, 0x3F, 0x60, 0x20, 0xC2, 0x3B, 0xAF, 0x1C, 0x05,
               0x92, 0x6D, 0x8E, 0x71, 0x36, 0x96, 0x22, 0x2B, 0x1B, 0x3D, 0xFF, 0x73, 0x59, 0xBE, 0x35, 0xBA,
               0xB1, 0x45, 0x15, 0xCC, 0x4B, 0x1D, 0x7A, 0x9C, 0x0E, 0x84, 0x49, 0x67, 0xAD, 0xF0, 0x0F, 0x2E,
               0x5E, 0x16, 0x7B, 0xF7, 0x52, 0xBF, 0xEB, 0x9B, 0xC5, 0xE3, 0xDC, 0x02, 0x8D, 0x04, 0xF6, 0x21,
               0xC0, 0x38, 0x3E, 0x4D, 0x11, 0xE9, 0x1F, 0xFB, 0xA6, 0xAC, 0x94, 0x62, 0x2A, 0xD9, 0xA8, 0xC4,
               0xF3, 0x00, 0xC1, 0xCD, 0xD3, 0x9F, 0xA3, 0x9E, 0xEC, 0xD7, 0xFC, 0xE8, 0x0D, 0x47, 0x48, 0x90,
               0xE5, 0x58, 0xDA, 0xA9, 0x56, 0xFE, 0xD6, 0x34, 0x6E, 0xAA, 0x0C, 0x8A, 0x95, 0x17, 0x01, 0x68,
               0x09, 0xB7, 0xE7, 0x37, 0x25, 0x79, 0xE6, 0x63, 0x98, 0xB9, 0x33, 0xB6, 0x87, 0x86, 0x24, 0xA2,
               0x70, 0x76, 0x5B, 0xF2, 0x44, 0x13, 0xE0, 0x46, 0x53, 0xB8, 0x32, 0x2D, 0x10, 0x1E, 0xC9, 0x7D,
               0x14, 0xF1, 0x9A, 0xD2, 0x57, 0x4E, 0xF4, 0xED, 0x97, 0xB3, 0xDF, 0x39, 0x54, 0x66, 0x6C, 0x7E]

#promoted class, unpromoted equivalent
#if no unpromoted equivalent, zero
promoPairs = [(3,0),(4,0),(5,2),(8,6),(9,7),(12,10),(13,0),(16,14),(17,15),
              (19,18),(22,20),(23,21),(25,24),(27,26),(30,29),(32,31),
              (37,33),(38,34),(39,35),(40,36)]

def twosComplement8(n):
    return n - 0x100 if n & 0x80 else n

'''
@functools.lru_cache(1 << 10)
def C1(n, k, a, b):
    "Counts the compositions of `n` into `k` parts bounded by `a` and `b`" 
    return C2(n - k*(a - 1), k, b - (a - 1))

def C2(n, k, b):
    "Computes C(n, k, 1, b) using binomial coefficients"
    total = 0
    sign = +1

    for i in range(0, k + 1):
        total += sign * choose(k, i) * choose(n - i*b - 1, k - 1)
        sign = -sign

    return total

def choose(n, k):
    "Computes the binomial coefficient of (n, k)"
    if k < 0 or k > n:
        return 0

    if k == 0 or k == n:
        return 1

    k = min(k, n - k)
    c = 1

    for i in range(k):
        c = c * (n - i) // (i + 1)

    return c

def check_pre_and_post_conditions(f):
    def wrapper(n, k, a, b):
        assert 1 <= k <= n, (n, k)
        assert 1 <= a <= b <= n, (n, a, b)
        assert k*a <= n <= k*b, (n, k, a, b)

        comp = f(n, k, a, b)

        assert len(comp) == k, (len(comp), k, comp)
        assert sum(comp) == n, (sum(comp), n, comp)
        assert all(a <= x <= b for x in comp), (a, b, comp)

        return comp
    return functools.wraps(f)(wrapper)

@check_pre_and_post_conditions
def random_restricted_composition(n, k, a, b):
    """Produces a random composition of `n` into `k` parts bounded by `a` and `b`
    written by Lazy Dog on stackoverflow:
    https://stackoverflow.com/a/40250841"""
    total = C1(n, k, a, b)
    which = random.randrange(total)
    comp = []

    while k:
        for x in range(a, min(b, n) + 1):
            count = C1(n - x, k - 1, a, b)

            if count > which:
                break

            which -= count

        comp.append(x)
        n -= x
        k -= 1

    return comp
    '''
